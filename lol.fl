fun inc(-> Int i):
    -> i + 1

fun foo(-> Int a, Int b) -> Int:
    c <- a + b
    a <- b
    return c

fun swap(-> Int a, -> Int b):
    a1 <- a # tu trzeba wykryć, że `a` się dalej nie pojawia, więc nie ma aliasingu
    b -> a
    b <- a1

fun main():
    a <- 0
    b <- 0
    # inc(a);  # error: result ignored
    #_ <- inc(a);  # error: result ignored
                   # It should work for procs but not funs.
    assert a == 0 and b == 0  # nothing changed
    inc(-> a);  # put result in a
    assert a == 1 and b == 0  # a incremented
    b <- inc(a)  # put result in b
    assert a == 1 and b == 2  # b :== a+1
    ! a, b
    c <- foo(-> a, b)
    foo(-> a, b) -> c # same as above
    ! a, b, c
    swap(->b, ->c)
    !a, b, c
    swap(->a, ->b)
    !a, b, c

fun factorial(Int n):
    if n < 2:
        return 1
    else:
        return n * factorial(n-1)

fun factorial1(Int n):
    result <- 1
    for i in 2..n:
        -> result * i
    return result
