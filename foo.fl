
type List:
    Nil
    Cons:
        Int head
        List tail


def inc(-> Int i):
    i <- i+1

def testInc():
    let a = 0;
    let b = 0;
    # inc(a);  # error: result ignored
    _ <- inc(a);  # result explicitly ignored
    assert a = 0 and b = 0  # nothing changed
    inc(-> a);  # put result in a
    assert a = 1 and b = 0  # a incremented
    b <- inc(a)  # put result in b
    assert a = 1 and b = 2  # b := a+1

def factorial(Int n):
    if n < 2:
        return 1
    else:
        return n * factorial(n-1)

def factorial1(Int n):
    let result = 1
    for i in 2..n:
        result <- * i
    return result

hof mapArray((a)->b f)([a] l) -> [b]:
    [b] result = []
    array_reserve(result, l.length)
    for elem in l:
        array_push(-> result, f(elem))
    return result

hof mapArrayInSitu((a)->a f)(-> [a] list):
    for -> elem in list:
        f(-> elem)
