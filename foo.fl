
type List[T]:
    Nil
    Cons:
        T head
        List tail

fun len[T](List[T] l):
    case l:
        Nil:
            return 0
        Cons(_, l'):
            return 0 + len(l')

fun inc(-> Int i):
    -> i + 1

fun zip[T1, T2](List[T1] l1, List[T2] l1) -> List[(T1, T2)]:
    case l1, l2:
        Cons(e1, l1'), Cons(e2, l2'):
            return Cons((e1, e2), zip(l1', l2'))
        _, _:
            return []

fun testInc():
    let a = 0;
    let b = 0;
    # inc(a);  # error: result ignored
    _ <- inc(a);  # result explicitly ignored
    assert a == 0 and b == 0  # nothing changed
    inc(-> a);  # put result in a
    assert a == 1 and b == 0  # a incremented
    b <- inc(a)  # put result in b
    assert a == 1 and b == 2  # b :== a+1

fun factorial(Int n):
    if n < 2:
        return 1
    else:
        return n * factorial(n-1)

fun factorial1(Int n):
    let result = 1
    for i in 2..n:
        -> result * i
    return result
