entrypoints Module, Exp;

layout toplevel ;
layout ":" ;
comment "#";

position token Name ((letter | '_') (letter | digit | '_')* ('\'')*) ;

Mod. Module ::= [TopDef] ;
separator TopDef ";" ;

VariantTypeDef. TopDef ::= "type" Name GenArgsDef ":" "{" [VariantDef] "}" ;
SimpleTypeDef.  TopDef ::= "type" Name GenArgsDef ":" "{" [Field] "}" ;  -- just one variant
ProcDef.        TopDef ::= "proc" Name GenArgsDef "(" [ArgDef] ")" RetType Block ;
FunDef.         TopDef ::= "fun" Name GenArgsDef "(" [ArgDef] ")" RetType Block ;
ConstDef.       TopDef ::= "const" [Name] "=" Exp ;
separator ArgDef "," ;

NoGenArgs. GenArgsDef ::= ;
GenArgs_.  GenArgsDef ::= "[" [CommaName] "]" ;

CommaName_. CommaName ::= Name ;
separator nonempty CommaName "," ;

EmptyVariant.  VariantDef ::= Name ;
SimpleVariant. VariantDef ::= Name "(" [Type] ")" ;
RecordVariant. VariantDef ::= Name ":" "{" [Field] "}" ;
separator nonempty VariantDef ";" ;

FieldDef. Field ::= Type Name ;
separator nonempty Field ";" ;

ValArgDef.  ArgDef ::= Type Name ;
VarArgDef.  ArgDef ::= "->" Type Name ;

Blk. Block ::= ":" "{" [Stmt] "}" ;
separator Stmt ";" ;

separator nonempty Name "." ;

JustType. RetType ::= "->" Type ;
NoType.   RetType ::= ;

NamedType. Type ::= [Name] ;
ArrayType. Type ::= "[" Type "]" ;
TupleType. Type ::= "(" [Type] ")" ;
InstType.  Type ::= [Name] "[" [Type] "]" ; -- generic type instantiation
separator Type "," ;

-- StmtLet.          Stmt ::= "let" Exp60 "=" Exp ; -- may be a tuple
-- StmtTypedLet.     Stmt ::= "let" Exp71 Name "=" Exp ;
StmtLAssign.     Stmt ::= Exp "<-" Exp ;
StmtRAssign.     Stmt ::= Exp "->" Exp ;
StmtPass.        Stmt ::= "pass" ;
StmtAssert.      Stmt ::= "assert" Exp ;
StmtStatAssert.  Stmt ::= "static" "assert" Exp ;
StmtPrint.       Stmt ::= "!" [Exp] ;
StmtExp.         Stmt ::= Exp ;
StmtReturn.      Stmt ::= "return" ;
StmtReturnValue. Stmt ::= "return" Exp ;
StmtIf.          Stmt ::= "if" Exp Block ;
StmtElif.        Stmt ::= "elif" Exp Block ;
StmtElse.        Stmt ::= "else" Block ;
StmtWhile.       Stmt ::= "while" Exp  Block ;
StmtForIn.       Stmt ::= "for" Name "in" Exp Block ;
StmtForVarIn.    Stmt ::= "for" "->" Name "in" Exp Block ;
StmtBreak.       Stmt ::= "break" ;
StmtContinue.    Stmt ::= "continue" ;
StmtCase.        Stmt ::= "case" [Exp] ":" "{" [CasePattern] "}";
internal StmtIfElse. Stmt ::= "if" Exp Block [ElifClause] Block;
separator CasePattern ";" ;

Pattern. CasePattern ::= [Exp] Block ;

Elif. ElifClause ::= "elif" Exp Block ;
terminator ElifClause "" ;

ExpAnd. Exp2 ::= Exp2 "and" Exp4 ;

ExpOr. Exp4 ::= Exp4 "or" Exp6 ;

ExpCmp. Exp6 ::= Exp8 CmpOp Exp8 ;

EqOp. CmpOp ::= "==" ;
NeOp. CmpOp ::= "/=" ;
LtOp. CmpOp ::= "<" ;
GtOp. CmpOp ::= ">" ;
LeOp. CmpOp ::= "<=" ;
GeOp. CmpOp ::= ">=" ;

ExpAdd.   Exp8 ::= Exp8 "+" Exp42 ;
ExpSub.   Exp8 ::= Exp8 "-" Exp42 ;

ExpRange. Exp36 ::= Exp42 ".." Exp42 ;

ExpMul.    Exp42 ::= Exp42 "*" Exp50 ;
ExpDiv.    Exp42 ::= Exp42 "/" Exp50 ;
ExpDivInt. Exp42 ::= Exp42 "//" Exp50 ;
ExpMod.    Exp42 ::= Exp42 "%" Exp50 ;

ExpCall. Exp55 ::= Exp60 "(" [Exp] ")" ;

ExpInt.   Exp60 ::= Integer ;
ExpDouble.Exp60 ::= Double ;
ExpStr.   Exp60 ::= String ;
ExpChar.  Exp60 ::= Char ;
ExpTrue.  Exp60 ::= "True" ;
ExpFalse. Exp60 ::= "False" ;
ExpArray. Exp60 ::= "[" [Exp] "]" ;
ExpTuple. Exp60 ::= "(" Exp "," [Exp] ")" ;

ExpNot.   Exp60 ::= "not" Exp60 ;
ExpNeg.   Exp60 ::= "-" Exp60 ;

ExpArrow.     Exp70 ::= "->" Exp71 ;
ExpVoT.       Exp71 ::= [Name] ; -- var or type
ExpSubscript. Exp71 ::= Exp71 "[" [Exp] "]" ;  -- index projection or generic instantiation

separator Exp ",";
coercions Exp 100 ;
